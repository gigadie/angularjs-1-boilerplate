{
	"maxerr"       : 50,        // {int} Maximum error before stopping

	// Enforcing
	"bitwise"      : true,      // true: Prohibit bitwise operators (&, |, ^, etc.)
	"camelcase"    : false,     // true: Identifiers must be in camelCase
	"freeze"       : false,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.
	"plusplus"     : false,     // true: Prohibit use of `i++` & `i--`
	"strict"       : false,     // true: Requires all functions run in ES5 Strict Mode,
	"curly"        : true,      // true: Require {} for every new block or scope
	"eqeqeq"       : true,      // true: Require triple equals (===) for comparison
	"forin"        : true,      // true: Require filtering for..in loops with obj.hasOwnProperty()
	"immed"        : true,      // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
	"latedef"      : false,     // `nofunc`: Require variables to be defined before being used, function can be defined later
	"newcap"       : true,      // true: Require capitalization of all constructor functions e.g. `new F()`
	"noarg"        : true,      // true: Prohibit use of `arguments.caller` and `arguments.callee`
	"noempty"      : true,      // true: Prohibit use of empty blocks
	"nonbsp"       : true,      // true: Prohibit "non-breaking whitespace" characters.
	"nonew"        : true,      // true: Prohibit use of constructors for side-effects (without assignment)
	"quotmark"     : "single",  // Quotation mark consistency: `'`
	"undef"        : true,      // true: Require all non-global variables to be declared (prevents global leaks)
	"unused"       : true,      // true: Require all defined variables be used, 'vars': excludes function params
	"maxparams"    : 10,        // {int} Max number of formal params allowed per function
	"maxdepth"     : 5,         // {int} Max depth of nested blocks (within functions)
	"maxstatements": 40,        // {int} Max number statements per function
	"maxcomplexity": 8,         // {int} Max cyclomatic complexity per function
	"maxlen"       : 120,       // {int} Max number of characters per line,

	//// Relaxing
	"asi"          : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
	"boss"         : false,     // true: Tolerate assignments where comparisons would be expected
	"debug"        : false,     // true: Allow debugger statements e.g. browser breakpoints.
	"eqnull"       : true,      // true: Tolerate use of `== null`
	"moz"          : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
	"evil"         : false,     // true: Tolerate use of `eval` and `new Function()`
	"expr"         : false,     // true: Tolerate `ExpressionStatement` as Programs
	"funcscope"    : true,      // true: Tolerate defining variables inside control statements
	"globalstrict" : false,     // true: Allow global "use strict" (also enables 'strict')
	"iterator"     : false,     // true: Tolerate using the `__iterator__` property
	"lastsemic"    : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
	"laxbreak"     : false,     // true: Tolerate possibly unsafe line breakings
	"laxcomma"     : false,     // true: Tolerate comma-first style coding
	"loopfunc"     : true,      // true: Tolerate functions being defined in loops
	"multistr"     : false,     // true: Tolerate multi-line strings
	"noyield"      : false,     // true: Tolerate generator functions with no yield statement in them.
	"notypeof"     : false,     // true: Tolerate invalid typeof operator values
	"proto"        : false,     // true: Tolerate using the `__proto__` property
	"scripturl"    : false,     // true: Tolerate script-targeted URLs
	"shadow"       : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
	"sub"          : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
	"supernew"     : false,     // true: Tolerate `new function () { ... };` and `new Object;`
	"validthis"    : false,     // true: Tolerate using this in a non-constructor function

	//// Environments
	"browser"      : true,      // Web Browser (window, document, etc)
	"devel"        : true,      // Development/debugging (alert, confirm, etc)
	"jasmine"      : true,      // Jasmine
	"node"         : true,      // Node

	//// Globals
	"globals": {
		// "angular"    : false, no need for this becose we are using Browserify
		"after"      : false,
		"afterEach"  : false,
		"before"     : false,
		"beforeEach" : false,
		"context"    : false,
		"describe"   : false,
		"it"         : false,
		"window"     : false
	}
}